import numpy as np

# numpyArray
np.array([3.14,4,2,3])
np.array([1,2,3,4], dtype="float32")#chuyen du lieu sang float

a1=np.array([1,2,3,4])
print(type(a1))
a2=np.array([[1,2,3],
            [4,5,6]])
print(a2.shape)#in ra so hang va cot
a2.ndim#in ra so chieu cua ma tran

a2.dtype#return kieu du lieu ben trong cua array

a2.size

np.zeros([2,4],dtype= int)#tao ra 1 ma tran 0
np.ones([3,5],dtype=float)#tao 1 ma trann 1
np.arange(0,20,2)#tao mang bat dau o 0 va ket thuc o 20 step la 2

np.full([3,5],6.9)#tao mang co shape la [3,5] va fill so 6.9

np.linspace(0,1,5)#chia khoang tu 0 den 1 lam 5 phan

np.random.seed(0)
np.random.random((4,4))#random cac so trong khoang tu 0 den 1
np.random.rand(4,4)

np.random.normal(0,1,(3,3))#tao mang co gia tri trunng binh la 0,do lech chuan la 1,size(3,3)

np.random.randint(0,10,[1,2])#tao ma tran co random tu 0 den 10

x2=np.random.randint(10,size=(3,4))
print(x2)
x2[2][2]
x2[:2,:3]

x1=np.random.randint(10,size=6)
print(x1.shape)
x1[0:3]
x1[::3]#buoc nhay

grid=np.arange(1,10)
print(grid)
grid.shape
grid.reshape((3,3))

x=np.array([[1,2],[3,4]])
# print(x)
x.T#chuyen vi
y=np.array([1,2,3])
print(y.T.shape)

x=np.array([1,2,3])
y=np.array([3,2,1])
# print(y.reshape(1,3))
np.concatenate((x,y))

grid=np.array([[1,2,3],[4,5,6]])
print(np.concatenate((grid,grid)))
np.concatenate((grid,grid),axis=1)


x=np.array([1,2,3])
grid=np.array([[9,8,7],[7,6,5]])
np.vstack((x,grid))

y=np.array([[99],[99]])
np.hstack((grid,y))

x=np.array([1,2,3,4,99,66,5,8])
x1,x2,x3=np.split(x,[3,5])#dua vao array va khoang muon tach
print(x1)
print(x2)
print(x3)


x=np.array([[0,0,0],[0,0,0]])
y=np.array([1,2,3])
x*y#broardcast

a=np.array([1,2,3])
c=a.reshape((3,1))
a+c


array=np.random.random(10000)
array.shape


%timeit sum(array)
%timeit np.sum(array)


np.max(array)
np.min(array)

np.std()#do lech chuan
np.var()#phuong sai
np.sqrt(np.var())#phuong sai

x=np.array([2,1,4,5,3])
np.sort(x)

np.argsort(x)#tra ve mang vi tri cac so ban dau khi da sap xep



A=np.random.randint(0,10,size=(4,6))
np.sort(A,axis=0)#theo cot
np.sort(A,axis=1)#theo hang

